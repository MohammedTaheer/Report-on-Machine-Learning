#Linear Regression
import numpy as np
import sklearn
#Importing linear Regression Algorithm
from sklearn import linear_model
#List of features(x) and labels(y)
x=[[1],[2],[3],[4],[5],[6],[7]]
y=[  2.5, 3 , 3.5, 4, 4.5, 5, 5.5]
reg=linear_model.LinearRegression()
#Creating Model
reg.fit(x,y)
#Predicting by giving input
x_input=[[8]]
print(reg.predict(x_input))

#Logistic Regression
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
#Importing logistic Regression Algorithm
from sklearn.linear_model import LogisticRegression
#List of features(x) and labels(y)
X = [[30],[40],[50],[60],[20],[10],[70]]
y = [0,1,1,1,0,0,1]
classifier = LogisticRegression()
#Creating Model
classifier.fit(X,y)
#Predicting by giving input
X_marks=[[20]]
print(classifier.predict(X_marks))

#Decision Tree
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
X = [[30],[40],[50],[60],[20],[10],[70]]
y = [0,1,1,1,0,0,1]
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X,y)
X_marks=[[50]]
print(classifier.predict(X_marks))

#Random Forest
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
X = [[30],[40],[50],[60],[20],[10],[70]]
y = [0,1,1,1,0,0,1]
RandomForestRegModel = RandomForestRegressor()
RandomForestRegModel.fit(X,y)
classifier.fit(X,y)
X_marks=[[70]]
print(RandomForestRegModel.predict(X_marks))

#KNN
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
X = [[30],[40],[50],[60],[20],[10],[70]]
y = [0,1,1,1,0,0,1]
from sklearn.neighbors import KNeighborsClassifier  
classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  
classifier.fit(X,y) 
X_marks=[[80]]
print(classifier.predict(X_marks))

#SVM
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.svm import SVC
X = [[30],[40],[50],[60],[20],[10],[70]]
y = [0,1,1,1,0,0,1]
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X,y)
X_marks=[[55]]
print(classifier.predict(X_marks))
